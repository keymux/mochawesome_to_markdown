{
  "stats": {
    "suites": 9,
    "tests": 30,
    "passes": 30,
    "pending": 0,
    "failures": 0,
    "start": "2018-06-08T06:28:31.311Z",
    "end": "2018-06-08T06:28:31.361Z",
    "duration": 50,
    "testsRegistered": 30,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "d85ea376-b6af-47f9-8f01-8f8944cdb25c",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "0af863a0-693e-4652-b9d9-4cb152ade94e",
        "title": "promise_util.js",
        "fullFile": "/home/henry/dev/promisr/test/unit/promisify.js",
        "file": "/test/unit/promisify.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "044684a4-ec9b-49b7-82ee-11c4181fd908",
            "title": "promisifyCreator()",
            "fullFile": "/home/henry/dev/promisr/test/unit/promisify.js",
            "file": "/test/unit/promisify.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "02b52544-b18a-40f9-84a1-4c16eadd319f",
                "title": "given a function with an abnormal callback",
                "fullFile": "/home/henry/dev/promisr/test/unit/promisify.js",
                "file": "/test/unit/promisify.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "promise_util.js promisifyCreator() given a function with an abnormal callback \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "aResult = uuid();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d7a2daa-2fcf-4628-96a7-867d0c7d9d26",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "6d193534-6d03-4e1b-80ec-1094492d7d53",
                    "title": "and a properly crafted callback creator",
                    "fullFile": "/home/henry/dev/promisr/test/unit/promisify.js",
                    "file": "/test/unit/promisify.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "promise_util.js promisifyCreator() given a function with an abnormal callback and a properly crafted callback creator \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "mockInput = uuid();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fed5111f-c793-4db9-9fea-e0baed28c924",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should be possible to promisify that function",
                        "fullTitle": "promise_util.js promisifyCreator() given a function with an abnormal callback and a properly crafted callback creator should be possible to promisify that function",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return promisifyCreator(callbackCreator)(promisifyMe)(\n  mockInput,\n  false\n).then(result => {\n  expect(result).to.equal(aResult);\n  expect(callbackSpy.args).to.deep.equal([\n    [undefined, mockInput, aResult],\n  ]);\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7f283821-56f8-4d7b-b268-db658a7a0a9f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "should also work when there's an error",
                        "fullTitle": "promise_util.js promisifyCreator() given a function with an abnormal callback and a properly crafted callback creator should also work when there's an error",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return promisifyCreator(callbackCreator)(promisifyMe)(mockInput, true)\n  .then(() => Promise.reject(new Error(\"unexpected resolution\")))\n  .catch(error => {\n    expect(error.message).to.equal(ERROR_MESSAGE);\n    expect(callbackSpy.args).to.deep.equal([\n      [error, mockInput, undefined],\n    ]);\n  });",
                        "err": {},
                        "isRoot": false,
                        "uuid": "efce9c19-489e-42d7-91df-54322884158d",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "7f283821-56f8-4d7b-b268-db658a7a0a9f",
                      "efce9c19-489e-42d7-91df-54322884158d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 7,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "bfd5381d-fda1-4b4f-8fff-ffeaabdd70c2",
            "title": "promisify()",
            "fullFile": "/home/henry/dev/promisr/test/unit/promisify.js",
            "file": "/test/unit/promisify.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "promise_util.js promisify() \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "passingUuid = uuid();\nerrorUuid = uuid();\nfnSpy = spy();",
                "err": {},
                "isRoot": false,
                "uuid": "a2cbcf5b-7395-43ae-bab8-0f96d2fb85b0",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should promise to execute a standard callback function with a 0 argument signature like (callback) without a provided promise library",
                "fullTitle": "promise_util.js promisify() should promise to execute a standard callback function with a 0 argument signature like (callback) without a provided promise library",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return testFnBasic(count)(createPassMockFn(), passingUuid);",
                "err": {},
                "isRoot": false,
                "uuid": "20f1a633-9eec-43cc-a58d-4af4f3cb54fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should promise to execute a standard callback function with a 1 argument signature like (callback) without a provided promise library",
                "fullTitle": "promise_util.js promisify() should promise to execute a standard callback function with a 1 argument signature like (callback) without a provided promise library",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return testFnBasic(count)(createPassMockFn(), passingUuid);",
                "err": {},
                "isRoot": false,
                "uuid": "d7ccda21-ac6b-4a1a-8031-6d7990095e5f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should promise to execute a standard callback function with a 2 argument signature like (callback) without a provided promise library",
                "fullTitle": "promise_util.js promisify() should promise to execute a standard callback function with a 2 argument signature like (callback) without a provided promise library",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return testFnBasic(count)(createPassMockFn(), passingUuid);",
                "err": {},
                "isRoot": false,
                "uuid": "6a5de663-fbf4-473d-898e-5315c3abc027",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should promise to execute a standard callback function with a 10 argument signature like (callback) without a provided promise library",
                "fullTitle": "promise_util.js promisify() should promise to execute a standard callback function with a 10 argument signature like (callback) without a provided promise library",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return testFnBasic(count)(createPassMockFn(), passingUuid);",
                "err": {},
                "isRoot": false,
                "uuid": "1a3016f1-1963-4259-808f-2c0e2f6eb3d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should promise to execute a standard callback function with a signature containing 0 parameters without a provided promise library and reject if there there is an error in the result",
                "fullTitle": "promise_util.js promisify() should promise to execute a standard callback function with a signature containing 0 parameters without a provided promise library and reject if there there is an error in the result",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "testFnBasic(count)(createFailMockFn(), errorUuid)",
                "err": {},
                "isRoot": false,
                "uuid": "6297c694-fb43-4e94-b237-5394db424a57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should promise to execute a standard callback function with a signature containing 1 parameters without a provided promise library and reject if there there is an error in the result",
                "fullTitle": "promise_util.js promisify() should promise to execute a standard callback function with a signature containing 1 parameters without a provided promise library and reject if there there is an error in the result",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "testFnBasic(count)(createFailMockFn(), errorUuid)",
                "err": {},
                "isRoot": false,
                "uuid": "f43a8301-1983-433d-bab7-ec446af0b895",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should promise to execute a standard callback function with a signature containing 2 parameters without a provided promise library and reject if there there is an error in the result",
                "fullTitle": "promise_util.js promisify() should promise to execute a standard callback function with a signature containing 2 parameters without a provided promise library and reject if there there is an error in the result",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "testFnBasic(count)(createFailMockFn(), errorUuid)",
                "err": {},
                "isRoot": false,
                "uuid": "c062513b-a3ae-4eab-9550-090f756cef32",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should promise to execute a standard callback function with a signature containing 10 parameters without a provided promise library and reject if there there is an error in the result",
                "fullTitle": "promise_util.js promisify() should promise to execute a standard callback function with a signature containing 10 parameters without a provided promise library and reject if there there is an error in the result",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "testFnBasic(count)(createFailMockFn(), errorUuid)",
                "err": {},
                "isRoot": false,
                "uuid": "53753d21-c600-456d-a380-62fd9c62538e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [
              {
                "uuid": "8fcd4236-0474-4032-a65e-9e952292f2c8",
                "title": "when using native Promises ",
                "fullFile": "/home/henry/dev/promisr/test/unit/promisify.js",
                "file": "/test/unit/promisify.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should promise to execute a standard callback function with a 0 argument signature like (callback)",
                    "fullTitle": "promise_util.js promisify() when using native Promises  should promise to execute a standard callback function with a 0 argument signature like (callback)",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(0, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "672d6ac2-5d52-4843-b7f1-92f750d8b2f5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should promise to execute a standard callback function with a 1 argument signature like (a, callback)",
                    "fullTitle": "promise_util.js promisify() when using native Promises  should promise to execute a standard callback function with a 1 argument signature like (a, callback)",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(1, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "affd6943-310e-4c9f-8520-026f78565b4d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should promise to execute a standard callback function with a 2 argument signature like (a, b, callback)",
                    "fullTitle": "promise_util.js promisify() when using native Promises  should promise to execute a standard callback function with a 2 argument signature like (a, b, callback)",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(2, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a0e09ffc-cef8-4658-b9e8-48b4dae5c39f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should promise to execute a standard callback function with a 10 argument signature like (a, b, c, d, e, f, g, h, i, j, callback)",
                    "fullTitle": "promise_util.js promisify() when using native Promises  should promise to execute a standard callback function with a 10 argument signature like (a, b, c, d, e, f, g, h, i, j, callback)",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(10, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "444d69a2-b03c-49b4-be08-1297e4d35e4f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should reject if called back with an error",
                    "fullTitle": "promise_util.js promisify() when using native Promises  should reject if called back with an error",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(10, spy(promiseLib))(createFailMockFn(), errorUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ffd735c-92f8-4f9d-9545-beb20be9a9f9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "672d6ac2-5d52-4843-b7f1-92f750d8b2f5",
                  "affd6943-310e-4c9f-8520-026f78565b4d",
                  "a0e09ffc-cef8-4658-b9e8-48b4dae5c39f",
                  "444d69a2-b03c-49b4-be08-1297e4d35e4f",
                  "8ffd735c-92f8-4f9d-9545-beb20be9a9f9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 2,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "ae9f51fa-1624-42d2-9142-c45ddcb81d2e",
                "title": "when using Promise library 1",
                "fullFile": "/home/henry/dev/promisr/test/unit/promisify.js",
                "file": "/test/unit/promisify.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should promise to execute a standard callback function with a 0 argument signature like (callback)",
                    "fullTitle": "promise_util.js promisify() when using Promise library 1 should promise to execute a standard callback function with a 0 argument signature like (callback)",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(0, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a9bd6ef1-d22d-4e49-ac54-da3c7ccf7097",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should promise to execute a standard callback function with a 1 argument signature like (a, callback)",
                    "fullTitle": "promise_util.js promisify() when using Promise library 1 should promise to execute a standard callback function with a 1 argument signature like (a, callback)",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(1, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61cc5fb7-db51-4db3-85f3-5177394d3df8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should promise to execute a standard callback function with a 2 argument signature like (a, b, callback)",
                    "fullTitle": "promise_util.js promisify() when using Promise library 1 should promise to execute a standard callback function with a 2 argument signature like (a, b, callback)",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(2, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b76b905e-3592-48c3-bf71-51df0b132aa1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should promise to execute a standard callback function with a 10 argument signature like (a, b, c, d, e, f, g, h, i, j, callback)",
                    "fullTitle": "promise_util.js promisify() when using Promise library 1 should promise to execute a standard callback function with a 10 argument signature like (a, b, c, d, e, f, g, h, i, j, callback)",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(10, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e40068f-8565-43a9-9444-e22114401c8b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should reject if called back with an error",
                    "fullTitle": "promise_util.js promisify() when using Promise library 1 should reject if called back with an error",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(10, spy(promiseLib))(createFailMockFn(), errorUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "98879999-e13e-4c74-9aaa-b2c27adca636",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a9bd6ef1-d22d-4e49-ac54-da3c7ccf7097",
                  "61cc5fb7-db51-4db3-85f3-5177394d3df8",
                  "b76b905e-3592-48c3-bf71-51df0b132aa1",
                  "3e40068f-8565-43a9-9444-e22114401c8b",
                  "98879999-e13e-4c74-9aaa-b2c27adca636"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 7,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "c4d034a5-2da4-4da5-bbc5-91624c60a0ce",
                "title": "when using Promise library 2",
                "fullFile": "/home/henry/dev/promisr/test/unit/promisify.js",
                "file": "/test/unit/promisify.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should promise to execute a standard callback function with a 0 argument signature like (callback)",
                    "fullTitle": "promise_util.js promisify() when using Promise library 2 should promise to execute a standard callback function with a 0 argument signature like (callback)",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(0, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0ffa605a-abd2-4d75-ad07-833c16ab13fa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should promise to execute a standard callback function with a 1 argument signature like (a, callback)",
                    "fullTitle": "promise_util.js promisify() when using Promise library 2 should promise to execute a standard callback function with a 1 argument signature like (a, callback)",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(1, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4701ec1-64b3-4237-be8d-0156b22ce0db",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should promise to execute a standard callback function with a 2 argument signature like (a, b, callback)",
                    "fullTitle": "promise_util.js promisify() when using Promise library 2 should promise to execute a standard callback function with a 2 argument signature like (a, b, callback)",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(2, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eb38889d-79a1-461e-924a-3a7de4f3d2f9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should promise to execute a standard callback function with a 10 argument signature like (a, b, c, d, e, f, g, h, i, j, callback)",
                    "fullTitle": "promise_util.js promisify() when using Promise library 2 should promise to execute a standard callback function with a 10 argument signature like (a, b, c, d, e, f, g, h, i, j, callback)",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(10, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4ed46632-659d-4f9b-ade9-650aad71bc7c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should reject if called back with an error",
                    "fullTitle": "promise_util.js promisify() when using Promise library 2 should reject if called back with an error",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(10, spy(promiseLib))(createFailMockFn(), errorUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f1e7d96a-c43a-4ee7-9348-29c334957982",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0ffa605a-abd2-4d75-ad07-833c16ab13fa",
                  "d4701ec1-64b3-4237-be8d-0156b22ce0db",
                  "eb38889d-79a1-461e-924a-3a7de4f3d2f9",
                  "4ed46632-659d-4f9b-ade9-650aad71bc7c",
                  "f1e7d96a-c43a-4ee7-9348-29c334957982"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "c13b03e1-6755-4a72-a730-4095c4c83091",
                "title": "when using Promise library 3",
                "fullFile": "/home/henry/dev/promisr/test/unit/promisify.js",
                "file": "/test/unit/promisify.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should promise to execute a standard callback function with a 0 argument signature like (callback)",
                    "fullTitle": "promise_util.js promisify() when using Promise library 3 should promise to execute a standard callback function with a 0 argument signature like (callback)",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(0, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc5a2282-fdc9-4151-8345-b64bf57aa962",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should promise to execute a standard callback function with a 1 argument signature like (a, callback)",
                    "fullTitle": "promise_util.js promisify() when using Promise library 3 should promise to execute a standard callback function with a 1 argument signature like (a, callback)",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(1, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ae7a22aa-595a-4be4-9c1c-cc10cd46d78b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should promise to execute a standard callback function with a 2 argument signature like (a, b, callback)",
                    "fullTitle": "promise_util.js promisify() when using Promise library 3 should promise to execute a standard callback function with a 2 argument signature like (a, b, callback)",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(2, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b865d1ae-5ea0-4d8e-8840-a22c8429bd3f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should promise to execute a standard callback function with a 10 argument signature like (a, b, c, d, e, f, g, h, i, j, callback)",
                    "fullTitle": "promise_util.js promisify() when using Promise library 3 should promise to execute a standard callback function with a 10 argument signature like (a, b, c, d, e, f, g, h, i, j, callback)",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(10, spy(promiseLib))(createPassMockFn(), passingUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b57d5da-944b-48cd-903b-1e94592098c3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should reject if called back with an error",
                    "fullTitle": "promise_util.js promisify() when using Promise library 3 should reject if called back with an error",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "return testFn(10, spy(promiseLib))(createFailMockFn(), errorUuid);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "07586764-c8e4-4722-bf4f-9c32030e8581",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "cc5a2282-fdc9-4151-8345-b64bf57aa962",
                  "ae7a22aa-595a-4be4-9c1c-cc10cd46d78b",
                  "b865d1ae-5ea0-4d8e-8840-a22c8429bd3f",
                  "7b57d5da-944b-48cd-903b-1e94592098c3",
                  "07586764-c8e4-4722-bf4f-9c32030e8581"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 4,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [
              "20f1a633-9eec-43cc-a58d-4af4f3cb54fb",
              "d7ccda21-ac6b-4a1a-8031-6d7990095e5f",
              "6a5de663-fbf4-473d-898e-5315c3abc027",
              "1a3016f1-1963-4259-808f-2c0e2f6eb3d6",
              "6297c694-fb43-4e94-b237-5394db424a57",
              "f43a8301-1983-433d-bab7-ec446af0b895",
              "c062513b-a3ae-4eab-9550-090f756cef32",
              "53753d21-c600-456d-a380-62fd9c62538e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}